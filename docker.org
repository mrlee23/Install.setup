#+INCLUDE: ./main.setup
#+TITLE: docker
#+AUTHOR: Dongsoo Lee
#+EMAIL: dongsoolee8@gmail.com
#+DATE: 2018-02-20

* Overview
  :PROPERTIES: 
  :CUSTOM_ID: overview
  :LANG: en
  :END:      

{{{LATEST_VERSION(17.12.0-ce)}}}

Docker image and container command line interface

** Introduction
  :PROPERTIES: 
  :CUSTOM_ID: introduction
  :LANG: en
  :END:    

is a client for interacting with the daemon (see dockerd(8)) through the CLI.

The Docker CLI has over 30 commands. The commands are listed below and each has its own man page which explain usage and arguments.

To see the man page for a command run man docker <command>.


* How to Install
  :PROPERTIES: 
  :CUSTOM_ID: how-to-install
  :LANG: en
  :END:      

** Prerequisites
   :PROPERTIES: 
   :CUSTOM_ID: prerequisites
   :LANG: en
   :END:      

- {{{link(update)}}}
- {{{link(curl)}}}
- {{{link(apt-add-repository)}}}
- {{{link(ca-certificates)}}}

** Install
  :PROPERTIES: 
  :CUSTOM_ID: install
  :LANG: en
  :END:      

*** Ubuntu 16.04 ~
   	:PROPERTIES: 
   	:END:      

#+NAME: ubuntu_update-install_docker
#+BEGIN_SRC sh
# Remove old version
$ sudo apt-get remove docker docker-engine docker.io

# Install packages
$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common

# Add Docker's official GPG key
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

$ sudo apt-key fingerprint 0EBFCD88
#+END_SRC
- x86_64 / amd64
#+BEGIN_SRC sh
$ sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
#+END_SRC

- armhf
#+BEGIN_SRC sh
$ sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
#+END_SRC

- IBM Power
#+BEGIN_SRC sh
$ sudo add-apt-repository \
   "deb [arch=ppc64el] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
#+END_SRC

- IBM Z (s390x)
#+BEGIN_SRC sh
$ sudo add-apt-repository \
   "deb [arch=s390x] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
#+END_SRC

#+BEGIN_SRC sh
$ sudo apt-get install docker-ce
#+END_SRC

*** Fedora
   	:PROPERTIES: 
   	:END:      

#+BEGIN_SRC sh
$ yum update
$ yum install docker
$ systemctl enable docker.service
$ systemctl start docker.service
$ systemctl status docker.service
#+END_SRC

*** Redhat
   	:PROPERTIES: 
   	:END:      
#+BEGIN_SRC sh
$ subscription-manager register –username=<username> –auto-attach
$ subscription-manager repos –enable=rhel-7-server-extras-rpms
$ subscription-manager repos –enable=rhel-7-server-optimal-rpms
$ yum update
$ reboot
$ yum install docker
$ systemctl start docker.service
$ systemctl enable docker.service
$ systemctl status docker.service
#+END_SRC

*** Mac
- [[https://download.docker.com/mac/stable/Docker.dmg][Docker.dmg(Official)]]

** Installed Packages
   :PROPERTIES: 
   :CUSTOM_ID: packages
   :LANG: en
   :END:      

** Check
   :PROPERTIES: 
   :CUSTOM_ID: check
   :LANG: en
   :END:      

#+BEGIN_SRC sh
$ sudo docker run hello-world
#+END_SRC

#+BEGIN_EXAMPLE
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
ca4f61b1923c: Pull complete
Digest: sha256:083de497cff944f969d8499ab94f07134c50bcf5e6b9559b27182d3fa80ce3f7
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://cloud.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/
#+END_EXAMPLE

#+BEGIN_SRC sh
$ sudo docker --version
Docker version 17.12.0-ce, build c97c6d6
#+END_SRC

* Usage
  :PROPERTIES: 
  :CUSTOM_ID: usage
  :LANG: en
  :END:      

** Syntax
   :PROPERTIES: 
   :CUSTOM_ID: syntax
   :LANG: en
   :END:      

#+BEGIN_SRC sh
docker [OPTIONS] COMMAND [ARG...]

docker [ --help | -v | --version ]
#+END_SRC

# ** Configuration
#    :PROPERTIES: 
#    :CUSTOM_ID: configuration
#    :LANG_EN:  Configuration
#    :LANG_ES:  Configuración
#    :LANG_KO:  설정
#    :LANG_ZH:  组态
#    :LANG_JA:  設定
#    :END:      

** Options
   :PROPERTIES: 
   :CUSTOM_ID: options
   :LANG: en
   :END:      

- {{{option(--config)}}} {{{argument(string)}}} : 
Location of client config files (default "/root/.docker")
- {{{option(-D)}}}, {{{option(--debug)}}} :
Enable debug mode
- {{{option(--help)}}} :
Print usage
- {{{option(-H)}}}, {{{option(--host)}}} {{{argument(value)}}} :
Daemon socket(s) to connect to (default [])
- {{{option(-l)}}}, {{{option(--log-level)}}} {{{argument(string)}}} :
Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
- {{{option(--tls)}}} :
Use TLS; implied by --tlsverify
- {{{option(--tlscacert)}}} {{{argument(string)}}} :
Trust certs signed only by this CA (default "/root/.docker/ca.pem")
- {{{option(--tlscert)}}} {{{argument(string)}}} :
Path to TLS certificate file (default "/root/.docker/cert.pem")
- {{{option(--tlskey)}}} {{{argument(string)}}} :
Path to TLS key file (default "/root/.docker/key.pem")
- {{{option(--tlsverify)}}} :
Use TLS and verify the remote
- {{{option(-v)}}}, {{{option(--version)}}} :
Print version information and quit

** Variables
   :PROPERTIES: 
   :CUSTOM_ID: environment-variables
   :LANG: en
   :END:      

- {{{variable(DOCKER_API_VERSION)}}} :
The API version to use (e.g. 1.19)
- {{{variable(DOCKER_CONFIG)}}} :
The location of your client configuration files.
- {{{variable(DOCKER_CERT_PATH)}}} :
The location of your authentication keys.
- {{{variable(DOCKER_DRIVER)}}} :
The graph driver to use.
- {{{variable(DOCKER_HOST)}}} :
Daemon socket to connect to.
- {{{variable(DOCKER_NOWARN_KERNEL_VERSION)}}} :
Prevent warnings that your Linux kernel is unsuitable for Docker.
- {{{variable(DOCKER_RAMDISK)}}} :
If set this will disable ‘pivot_root’.
- {{{variable(DOCKER_TLS_VERIFY)}}} :
When set Docker uses TLS and verifies the remote.
- {{{variable(DOCKER_CONTENT_TRUST)}}} :
When set Docker uses notary to sign and verify images. Equates to --disable-content-trust=false for build, create, pull, push, run.
- {{{variable(DOCKER_CONTENT_TRUST_SERVER)}}} :
The URL of the Notary server to use. This defaults to the same URL as the registry.
- {{{variable(DOCKER_HIDE_LEGACY_COMMANDS)}}} :
When set, Docker hides “legacy” top-level commands (such as docker rm, and docker pull) in docker help output, and only Management commands per object-type (e.g., docker container) are printed. This may become the default in a future release, at which point this environment-variable is removed.
- {{{variable(DOCKER_TMPDIR)}}} :
Location for temporary Docker files.
- {{{variable(HTTP_PROXY)}}}
- {{{variable(HTTPS_PROXY)}}}
- {{{variable(NO_PROXY)}}}
** Commands
   :PROPERTIES: 
   :CUSTOM_ID: commands
   :LANG: en
   :END:      

| Command | Description |
|------------------------+-------------------------------------------------------------------------------|
| attach                 | Attach local standard input, output, and error streams to a running container |
| build                  | Build an image from a Dockerfile                                              |
| checkpoint             | Manage checkpoints                                                            |
| commit                 | Create a new image from a container’s changes                                |
| config                 | Manage Docker configs                                                         |
| container              | Manage containers                                                             |
| cp                     | Copy files/folders between a container and the local filesystem               |
| create                 | Create a new container                                                        |
| deploy                 | Deploy a new stack or update an existing stack                                |
| diff                   | Inspect changes to files or directories on a container’s filesystem          |
| events                 | Get real time events from the server                                          |
| exec                   | Run a command in a running container                                          |
| export                 | Export a container’s filesystem as a tar archive                             |
| history                | Show the history of an image                                                  |
| image                  | Manage images                                                                 |
| images                 | List images                                                                   |
| import                 | Import the contents from a tarball to create a filesystem image               |
| info                   | Display system-wide information                                               |
| inspect                | Return low-level information on Docker objects                                |
| kill                   | Kill one or more running containers                                           |
| load                   | Load an image from a tar archive or STDIN                                     |
| login                  | Log in to a Docker registry                                                   |
| logout                 | Log out from a Docker registry                                                |
| logs                   | Fetch the logs of a container                                                 |
| network                | Manage networks                                                               |
| node                   | Manage Swarm nodes                                                            |
| pause                  | Pause all processes within one or more containers                             |
| plugin                 | Manage plugins                                                                |
| port                   | List port mappings or a specific mapping for the container                    |
| ps                     | List containers                                                               |
| pull                   | Pull an image or a repository from a registry                                 |
| push                   | Push an image or a repository to a registry                                   |
| rename                 | Rename a container                                                            |
| restart                | Restart one or more containers                                                |
| rm                     | Remove one or more containers                                                 |
| rmi                    | Remove one or more images                                                     |
| {{{link(docker/run)}}} | Run a command in a new container                                              |
| save                   | Save one or more images to a tar archive (streamed to STDOUT by default)      |
| search                 | Search the Docker Hub for images                                              |
| secret                 | Manage Docker secrets                                                         |
| service                | Manage services                                                               |
| stack                  | Manage Docker stacks                                                          |
| start                  | Start one or more stopped containers                                          |
| stats                  | Display a live stream of container(s) resource usage statistics               |
| stop                   | Stop one or more running containers                                           |
| swarm                  | Manage Swarm                                                                  |
| system                 | Manage Docker                                                                 |
| tag                    | Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE                         |
| top                    | Display the running processes of a container                                  |
| trust                  | Manage trust on Docker images (experimental)                                  |
| unpause                | Unpause all processes within one or more containers                           |
| update                 | Update configuration of one or more containers                                |
| version                | Show the Docker version information                                           |
| volume                 | Manage volumes                                                                |
| wait                   | Block until one or more containers stop, then print their exit codes          |
# ** Examples
#    :PROPERTIES: 
#    :CUSTOM_ID: examples
#    :LANG_EN:  Examples
#    :LANG_ES:  Ejemplos
#    :LANG_KO:  사용 예
#    :LANG_ZH:  例子
#    :LANG_JA:  例
#    :END:      

# * See also
#   :PROPERTIES: 
#   :CUSTOM_ID: seealso
#   :LANG_EN:  See also
#   :LANG_ES:  Ver también
#   :LANG_KO:  관련 항목
#   :LANG_ZH:  相关主题
#   :LANG_JA:  関連項目
#   :END:      

* References
  :PROPERTIES: 
  :CUSTOM_ID: references
  :LANG: en
  :END:      

- [[https://docs.docker.com/docker-for-mac/install/][Install Docker for Mac(Official)]]
- [[https://docs.docker.com/install/][Install Docker(Offical)]]
