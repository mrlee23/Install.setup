#+INCLUDE: ./main.setup
#+TITLE: curl
#+AUTHOR: Dongsoo Lee
#+EMAIL: dongsoolee8@gmail.com
#+DATE: 2018-02-20

| Version              | {{{ver(7.58.0)}}}      |
| Release Date         | {{{date(2018-01-24)}}} |
| Package Size         | {{{size(135KB)}}}      |
| Installed Size       | {{{size(331KB)}}}      |
| Programming Language | C                      |

* Visión de conjunto
  :PROPERTIES: 
  :CUSTOM_ID: overview
  :LANG: es
  :END:      

Una herramienta de línea de comandos y una biblioteca para transferir datos con sintaxis de URL, compatible con HTTP, HTTPS, FTP, FTPS, GOPHER, TFTP, SCP, SFTP, SMB, TELNET, DICT, LDAP, LDAPS, ARCHIVO, IMAP, SMTP, POP3, RTSP y RTMP. libcurl ofrece una miríada de potentes funciones

* Cómo instalar
  :PROPERTIES: 
  :CUSTOM_ID: how-to-install
  :LANG: es
  :END:      

** Dependencias
   :PROPERTIES: 
   :CUSTOM_ID: dependencies
   :LANG: es
   :END:      

- libc6 (>= {{{ver(2.17)}}})
- libcurl3-gnutls (= {{{ver(7.58.0)}}})
- zlib1g (>= {{{ver(1:1.1.4)}}})

** Instalar
  :PROPERTIES: 
  :CUSTOM_ID: install
  :LANG: es
  :END:      

*** Ubuntu

#+BEGIN_SRC sh
$ sudo apt-get install curl
#+END_SRC

*** CentOS

#+BEGIN_SRC sh
$ sudo yum install curl
#+END_SRC

*** from Source code

#+BEGIN_SRC sh
$ git clone https://github.com/curl/curl.git
$ ./configure
$ make
$ sudo make install
#+END_SRC

** Paquetes instalados
   :PROPERTIES: 
   :CUSTOM_ID: packages
   :LANG: es
   :END:      

- curl

** Comprobar
   :PROPERTIES: 
   :CUSTOM_ID: check
   :LANG: es
   :END:      

#+BEGIN_SRC sh
$ curl --version
#+END_SRC

#+BEGIN_EXAMPLE
curl 7.47.0 (x86_64-pc-linux-gnu) libcurl/7.47.0 GnuTLS/3.4.10 zlib/1.2.8 libidn/1.32 librtmp/2.3
Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp smb smbs smtp smtps telnet tftp
Features: AsynchDNS IDN IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz TLS-SRP UnixSockets
#+END_EXAMPLE

 Cuando comprueba la versión, las bibliotecas compatibles y los protocolos y características admitidos se envían juntos.

* Uso
  :PROPERTIES: 
  :CUSTOM_ID: usage
  :LANG: es
  :END:      

** Sintaxis
   :PROPERTIES: 
   :CUSTOM_ID: syntax
   :LANG: es
   :END:      

#+BEGIN_SRC sh
curl [options] [URL...]
#+END_SRC

# ** Configuration
#    :PROPERTIES: 
#    :CUSTOM_ID: configuration
#    :LANG_EN:  Configuration
#    :LANG_ES:  Configuración
#    :LANG_KO:  설정
#    :LANG_ZH:  组态
#    :LANG_JA:  設定
#    :END:      

** Opciones
   :PROPERTIES: 
   :CUSTOM_ID: options
   :LANG: es
   :END:      

{{{VERSION(7.40.0)}}}

- {{{option(-#)}}}, {{{option(--progress-bar)}}}
 Make curl display progress as a simple progress bar instead of the standard, more informational, meter.

- {{{option(-:)}}}, {{{option(--next)}}}
Tells curl to use a separate operation for the following URL and associated options. This allows you to send several URL requests, each with their own specific
options, for example, such as different user names or custom requests for each. (Added in 7.36.0)

- {{{option(-0)}}}, {{{option(--http1.0)}}}
(HTTP) Tells curl to use HTTP version 1.0 instead of using its internally preferred: HTTP 1.1.

- {{{option(--http1.1)}}}
(HTTP) Tells curl to use HTTP version 1.1. This is the internal default version. (Added in 7.33.0)

- {{{option(--http2)}}}
(HTTP) Tells curl to issue its requests using HTTP 2. This requires that the underlying libcurl was built to support it. (Added in 7.33.0)

- {{{option(--no-npn)}}}
Disable the NPN TLS extension. NPN is enabled by default if libcurl was built with an SSL library that supports NPN. NPN is used by a libcurl that supports HTTP 2
to negotiate HTTP 2 support with the server during https sessions.

(Added in 7.36.0)

- {{{option(--no-alpn)}}}
Disable the ALPN TLS extension. ALPN is enabled by default if libcurl was built with an SSL library that supports ALPN. ALPN is used by a libcurl that supports
HTTP 2 to negotiate HTTP 2 support with the server during https sessions.

(Added in 7.36.0)

- {{{option(-1)}}}, {{{option(--tlsv1)}}}
(SSL) Forces curl to use TLS version 1.x when negotiating with a remote TLS server. You can use options {{{opt(--tlsv1.0)}}}, {{{opt(--tlsv1.1)}}}, and {{{opt(--tlsv1.2)}}} to control the TLS
version more precisely (if the SSL backend in use supports such a level of control).

- {{{option(-2)}}}, {{{option(--sslv2)}}}
(SSL) Forces curl to use SSL version 2 when negotiating with a remote SSL server. Sometimes curl is built without SSLv2 support. SSLv2 is widely considered inse-
cure (see RFC 6176).

- {{{option(-3)}}}, {{{option(--sslv3)}}}
(SSL) Forces curl to use SSL version 3 when negotiating with a remote SSL server. Sometimes curl is built without SSLv3 support. SSLv3 is widely considered inse-
cure (see RFC 7568).

- {{{option(-4)}}}, {{{option(--ipv4)}}}
This option tells curl to resolve names to IPv4 addresses only, and not for example try IPv6.

- {{{option(-6)}}}, {{{option(--ipv6)}}}
This option tells curl to resolve names to IPv6 addresses only, and not for example try IPv4.

- {{{option(-a)}}}, {{{option(--append)}}}
(FTP/SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it. If the remote file doesn't exist, it will be created.
Note that this flag is ignored by some SFTP servers (including OpenSSH).

- {{{option(-A)}}}, {{{option(--user-agent)}}} {{{argument(<agent string>)}}}
(HTTP) Specify the User-Agent string to send to the HTTP server. Some badly done CGIs fail if this field isn't set to "Mozilla/4.0". To encode blanks in the
string, surround the string with single quote marks. This can also be set with the {{{opt(-H)}}}, {{{opt(--header)}}} option of course.

If this option is used several times, the last one will be used.

- {{{option(--anyauth)}}}
(HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support. This is done by first doing a
request and checking the response-headers, thus possibly inducing an extra network round-trip. This is used instead of setting a specific authentication method,
which you can do with {{{opt(--basic)}}}, {{{opt(--digest)}}}, {{{opt(--ntlm)}}}, and {{{opt(--negotiate.)}}}

Note that using {{{opt(--anyauth)}}} is not recommended if you do uploads from stdin, since it may require data to be sent twice and then the client must be able to rewind.
If the need should arise when uploading from stdin, the upload operation will fail.

- {{{option(-b)}}}, {{{option(--cookie)}}} <{{{argument(name)}}}={{{argument(data)}}}>
(HTTP) Pass the data to the HTTP server as a cookie. It is supposedly the data previously received from the server in a "Set-Cookie:" line. The data should be in
the format "NAME1=VALUE1; NAME2=VALUE2".

If no '=' symbol is used in the line, it is treated as a filename to use to read previously stored cookie lines from, which should be used in this session if they
match. Using this method also activates the cookie engine which will make curl record incoming cookies too, which may be handy if you're using this in combination
with the {{{opt(-L)}}}, {{{opt(--location)}}} option. The file format of the file to read cookies from should be plain HTTP headers or the Netscape/Mozilla cookie file format.

The file specified with {{{opt(-b)}}}, {{{opt(--cookie)}}} is only used as input. No cookies will be written to the file. To store cookies, use the {{{opt(-c)}}}, {{{opt(--cookie-jar)}}} option.

Exercise caution if you are using this option and multiple transfers may occur. If you use the NAME1=VALUE1; format, or in a file use the Set-Cookie format and
don't specify a domain, then the cookie is sent for any domain (even after redirects are followed) and cannot be modified by a server-set cookie. If the cookie
engine is enabled and a server sets a cookie of the same name then both will be sent on a future transfer to that server, likely not what you intended. To
address these issues set a domain in Set-Cookie (doing that will include sub-domains) or use the Netscape format.

If this option is used several times, the last one will be used.

- {{{option(-B)}}}, {{{option(--use-ascii)}}}
(FTP/LDAP) Enable ASCII transfer. For FTP, this can also be enforced by using an URL that ends with ";type=A". This option causes data sent to stdout to be in
text mode for win32 systems.

- {{{option(--basic)}}}
(HTTP) Tells curl to use HTTP Basic authentication with the remote host. This is the default and this option is usually pointless, unless you use it to override a
previously set option that sets a different authentication method (such as {{{opt(--ntlm)}}}, {{{opt(--digest)}}}, or --negotiate).

Used together with {{{opt(-u)}}}, {{{opt(--user)}}} and {{{opt(-x)}}}, {{{opt(--proxy)}}}.

See also {{{opt(--proxy-basic)}}}.

- {{{option(-c)}}}, {{{option(--cookie-jar)}}} {{{argument(<file name>)}}}
(HTTP) Specify to which file you want curl to write all cookies after a completed operation. Curl writes all cookies previously read from a specified file as well
as all cookies received from remote server(s). If no cookies are known, no data will be written. The file will be written using the Netscape cookie file format.
If you set the file name to a single dash, "-", the cookies will be written to stdout.

This command line option will activate the cookie engine that makes curl record and use cookies. Another way to activate it is to use the {{{opt(-b)}}}, {{{opt(--cookie)}}} option.

If the cookie jar can't be created or written to, the whole curl operation won't fail or even report an error clearly. Using {{{opt(-v)}}} will get a warning displayed, but
that is the only visible feedback you get about this possibly lethal situation.

Since 7.43.0 cookies that were imported in the Set-Cookie format without a domain name are not exported by this option.

If this option is used several times, the last specified file name will be used.

- {{{option(-C)}}}, {{{option(--continue-at)}}} {{{argument(<offset>)}}}
Continue/Resume a previous file transfer at the given offset. The given offset is the exact number of bytes that will be skipped, counting from the beginning of
the source file before it is transferred to the destination. If used with uploads, the FTP server command SIZE will not be used by curl.

Use "-C -" to tell curl to automatically find out where/how to resume the transfer. It then uses the given output/input files to figure that out.

If this option is used several times, the last one will be used.

- {{{option(--ciphers)}}} {{{argument(<list of ciphers>)}}}
(SSL) Specifies which ciphers to use in the connection. The list of ciphers must specify valid ciphers. Read up on SSL cipher list details on this URL:
https://www.openssl.org/docs/apps/ciphers.html

NSS ciphers are done differently than OpenSSL and GnuTLS. The full list of NSS ciphers is in the NSSCipherSuite entry at this URL: https://git.fedora-
hosted.org/cgit/mod_nss.git/plain/docs/mod_nss.html#Directives

If this option is used several times, the last one will be used.

- {{{option(--compressed)}}}
(HTTP) Request a compressed response using one of the algorithms curl supports, and save the uncompressed document. If this option is used and the server sends
an unsupported encoding, curl will report an error.

- {{{option(--connect-timeout)}}} {{{argument(<seconds>)}}}
Maximum time in seconds that you allow curl's connection to take. This only limits the connection phase, so if curl connects within the given period it will con-
tinue - if not it will exit. Since version 7.32.0, this option accepts decimal values.

See also the {{{opt(-m)}}}, {{{opt(--max-time)}}} option.

If this option is used several times, the last one will be used.

- {{{option(--create-dirs)}}}
When used in conjunction with the {{{opt(-o)}}} option, curl will create the necessary local directory hierarchy as needed. This option creates the dirs mentioned with the
- {{{opt(-o)}}} option, nothing else. If the {{{opt(-o)}}} file name uses no dir or if the dirs it mentions already exist, no dir will be created.

To create remote directories when using FTP or SFTP, try {{{opt(--ftp-create-dirs)}}}.

- {{{option(--crlf)}}} Convert LF to CRLF in upload. Useful for MVS (OS/390).

(SMTP added in 7.40.0)

- {{{option(--crlfile)}}} {{{argument(<file>)}}}
(HTTPS/FTPS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.

If this option is used several times, the last one will be used.

(Added in 7.19.7)

- {{{option(-d)}}}, {{{option(--data)}}} {{{argument(<data>)}}}
(HTTP) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the
submit button. This will cause curl to pass the data to the server using the content-type application/x-www-form-urlencoded. Compare to {{{opt(-F)}}}, {{{opt(--form)}}}.

{{{opt(-d)}}}, {{{opt(--data)}}} is the same as {{{opt(--data-ascii)}}}. {{{opt(--data-raw)}}} is almost the same but does not have a special interpretation of the @ character. To post data purely binary,
you should instead use the {{{opt(--data-binary)}}} option. To URL-encode the value of a form field you may use {{{opt(--data-urlencode.)}}}

If any of these options is used more than once on the same command line, the data pieces specified will be merged together with a separating &-symbol. Thus, using
'-d name=daniel {{{opt(-d)}}} skill=lousy' would generate a post chunk that looks like 'name=daniel&skill=lousy'.

If you start the data with the letter @, the rest should be a file name to read the data from, or - if you want curl to read the data from stdin. Multiple files
can also be specified. Posting data from a file named 'foobar' would thus be done with {{{opt(--data)}}} @foobar. When {{{opt(--data)}}} is told to read from a file like that, carriage
returns and newlines will be stripped out. If you don't want the @ character to have a special interpretation use {{{opt(--data-raw)}}} instead.

- {{{option(-D)}}}, {{{option(--dump-header)}}} {{{argument(<file>)}}}
Write the protocol headers to the specified file.

This option is handy to use when you want to store the headers that an HTTP site sends to you. Cookies from the headers could then be read in a second curl invo-
cation by using the {{{opt(-b)}}}, {{{opt(--cookie)}}} option! The {{{opt(-c)}}}, {{{opt(--cookie-jar)}}} option is a better way to store cookies.

When used in FTP, the FTP server response lines are considered being "headers" and thus are saved there.

If this option is used several times, the last one will be used.

- {{{option(--data-ascii)}}} {{{argument(<data>)}}}
See {{{opt(-d)}}}, {{{opt(--data)}}}.

- {{{option(--data-binary)}}} {{{argument(<data>)}}}
(HTTP) This posts data exactly as specified with no extra processing whatsoever.

If you start the data with the letter @, the rest should be a filename. Data is posted in a similar manner as {{{opt(--data-ascii)}}} does, except that newlines and car-
riage returns are preserved and conversions are never done.

If this option is used several times, the ones following the first will append data as described in {{{opt(-d)}}}, {{{opt(--data)}}}.

- {{{option(--data-raw)}}} {{{argument(<data>)}}}
(HTTP) This posts data similarly to {{{opt(--data)}}} but without the special interpretation of the @ character. See {{{opt(-d)}}}, {{{opt(--data)}}}. (Added in 7.43.0)

- {{{option(--data-urlencode)}}} {{{argument(<data>)}}}
(HTTP) This posts data, similar to the other {{{opt(--data)}}} options with the exception that this performs URL-encoding. (Added in 7.18.0)

To be CGI-compliant, the <data> part should begin with a name followed by a separator and a content specification. The <data> part can be passed to curl using one
of the following syntaxes:

content
This will make curl URL-encode the content and pass that on. Just be careful so that the content doesn't contain any = or @ symbols, as that will then make
the syntax match one of the other cases below!

=content
This will make curl URL-encode the content and pass that on. The preceding = symbol is not included in the data.

name=content
This will make curl URL-encode the content part and pass that on. Note that the name part is expected to be URL-encoded already.

@filename
This will make curl load data from the given file (including any newlines), URL-encode that data and pass it on in the POST.

name@filename
This will make curl load data from the given file (including any newlines), URL-encode that data and pass it on in the POST. The name part gets an equal
sign appended, resulting in name=urlencoded-file-content. Note that the name is expected to be URL-encoded already.

- {{{option(--delegation)}}} {{{argument(LEVEL)}}}
Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials. Used with GSS/kerberos.

none Don't allow any delegation.

policy Delegates if and only if the OK-AS-DELEGATE flag is set in the Kerberos service ticket, which is a matter of realm policy.

always Unconditionally allow the server to delegate.

- {{{option(--digest)}}}
(HTTP) Enables HTTP Digest authentication. This is an authentication scheme that prevents the password from being sent over the wire in clear text. Use this in
combination with the normal {{{opt(-u)}}}, {{{opt(--user)}}} option to set user name and password. See also {{{opt(--ntlm)}}}, {{{opt(--negotiate)}}} and {{{opt(--anyauth)}}} for related options.

If this option is used several times, only the first one is used.

- {{{option(--disable-eprt)}}}
(FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers. Curl will normally always first attempt to use EPRT, then LPRT
before using PORT, but with this option, it will use PORT right away. EPRT and LPRT are extensions to the original FTP protocol, and may not work on all servers,
but they enable more functionality in a better way than the traditional PORT command.

{{{opt(--eprt)}}} can be used to explicitly enable EPRT again and {{{opt(--no-eprt)}}} is an alias for {{{opt(--disable-eprt)}}}.

Disabling EPRT only changes the active behavior. If you want to switch to passive mode you need to not use {{{opt(-P)}}}, {{{opt(--ftp-port)}}} or force it with {{{opt(--ftp-pasv)}}}.

- {{{option(--disable-epsv)}}}
(FTP) Tell curl to disable the use of the EPSV command when doing passive FTP transfers. Curl will normally always first attempt to use EPSV before PASV, but with
this option, it will not try using EPSV.

{{{opt(--epsv)}}} can be used to explicitly enable EPSV again and {{{opt(--no-epsv)}}} is an alias for {{{opt(--disable-epsv)}}}.

Disabling EPSV only changes the passive behavior. If you want to switch to active mode you need to use {{{opt(-P)}}}, {{{opt(--ftp-port)}}}.

- {{{option(--dns-interface)}}} {{{argument(<interface>)}}}
Tell curl to send outgoing DNS requests through <interface>. This option is a counterpart to {{{opt(--interface)}}} (which does not affect DNS). The supplied string must be
an interface name (not an address).

This option requires that libcurl was built with a resolver backend that supports this operation. The c-ares backend is the only such one. (Added in 7.33.0)

- {{{option(--dns-ipv4-addr)}}} {{{argument(<ip-address>)}}}
Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv4
address.

This option requires that libcurl was built with a resolver backend that supports this operation. The c-ares backend is the only such one. (Added in 7.33.0)

- {{{option(--dns-ipv6-addr)}}} {{{argument(<ip-address>)}}}
Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv6
address.

This option requires that libcurl was built with a resolver backend that supports this operation. The c-ares backend is the only such one. (Added in 7.33.0)

- {{{option(--dns-servers)}}} <{{{argument(ip-address)}}},{{{argument(ip-address)}}}>
Set the list of DNS servers to be used instead of the system default. The list of IP addresses should be separated with commas. Port numbers may also optionally
be given as :<port-number> after each IP address.

This option requires that libcurl was built with a resolver backend that supports this operation. The c-ares backend is the only such one. (Added in 7.33.0)

- {{{option(-e)}}}, {{{option(--referer)}}} {{{argument(<URL>)}}}
(HTTP) Sends the "Referrer Page" information to the HTTP server. This can also be set with the {{{opt(-H)}}}, {{{opt(--header)}}} flag of course. When used with {{{opt(-L)}}}, {{{opt(--location)}}} you can
append ";auto" to the {{{opt(--referer)}}} URL to make curl automatically set the previous URL when it follows a Location: header. The ";auto" string can be used alone, even
if you don't set an initial {{{opt(--referer)}}}.

If this option is used several times, the last one will be used.

- {{{option(-E)}}}, {{{option(--cert)}}} <{{{argument(certificate)}}}[:{{{argument(password)}}}]>
(SSL) Tells curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol. The certificate must be in
PKCS#12 format if using Secure Transport, or PEM format if using any other engine. If the optional password isn't specified, it will be queried for on the termi-
nal. Note that this option assumes a "certificate" file that is the private key and the client certificate concatenated! See {{{option(--cert)}}} and {{{option(--key)}}} to specify them
independently.

If curl is built against the NSS SSL library then this option can tell curl the nickname of the certificate to use within the NSS database defined by the environ-
ment variable SSL_DIR (or by default /etc/pki/nssdb). If the NSS PEM PKCS#11 module (libnsspem.so) is available then PEM files may be loaded. If you want to use a
file from the current directory, please precede it with "./" prefix, in order to avoid confusion with a nickname. If the nickname contains ":", it needs to be
preceded by "\\" so that it is not recognized as password delimiter. If the nickname contains "\\", it needs to be escaped as "\\\\" so that it is not recognized as
an escape character.

(iOS and Mac OS X only) If curl is built against Secure Transport, then the certificate string can either be the name of a certificate/private key in the system
or user keychain, or the path to a PKCS#12-encoded certificate and private key. If you want to use a file from the current directory, please precede it with "./"
prefix, in order to avoid confusion with a nickname.

If this option is used several times, the last one will be used.

- {{{option(--engine)}}} {{{argument(<name>)}}}
Select the OpenSSL crypto engine to use for cipher operations. Use {{{opt(--engine)}}} list to print a list of build-time supported engines. Note that not all (or none) of
the engines may be available at run-time.

- {{{option(--environment)}}}
(RISC OS ONLY) Sets a range of environment variables, using the names the {{{opt(-w)}}} option supports, to allow easier extraction of useful information after having run
curl.

- {{{option(--egd-file)}}} {{{argument(<file>)}}}
(SSL) Specify the path name to the Entropy Gathering Daemon socket. The socket is used to seed the random engine for SSL connections. See also the {{{opt(--random-file)}}}
option.

- {{{option(--expect100-timeout)}}} {{{argument(<seconds>)}}}
(HTTP) Maximum time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request. By default
curl will wait one second. This option accepts decimal values! When curl stops waiting, it will continue as if the response has been received.

(Added in 7.47.0)

- {{{option(--cert-type)}}} {{{argument(<type>)}}}
(SSL) Tells curl what certificate type the provided certificate is in. PEM, DER and ENG are recognized types. If not specified, PEM is assumed.

If this option is used several times, the last one will be used.

- {{{option(--cacert)}}} {{{argument(<CA certificate>)}}}
(SSL) Tells curl to use the specified certificate file to verify the peer. The file may contain multiple CA certificates. The certificate(s) must be in PEM for-
mat. Normally curl is built to use a default file for this, so this option is typically used to alter that default file.

curl recognizes the environment variable named 'CURL_CA_BUNDLE' if it is set, and uses the given path as a path to a CA cert bundle. This option overrides that
variable.

The windows version of curl will automatically look for a CA certs file named 'curl-ca-bundle.crt', either in the same directory as curl.exe, or in the Current
Working Directory, or in any folder along your PATH.

If curl is built against the NSS SSL library, the NSS PEM PKCS#11 module (libnsspem.so) needs to be available for this option to work properly.

If this option is used several times, the last one will be used.

- {{{option(--capath)}}} {{{argument(<CA certificate directory>)}}}
(SSL) Tells curl to use the specified certificate directory to verify the peer. Multiple paths can be provided by separating them with ":" (e.g.
"path1:path2:path3"). The certificates must be in PEM format, and if curl is built against OpenSSL, the directory must have been processed using the c_rehash
utility supplied with OpenSSL. Using {{{opt(--capath)}}} can allow OpenSSL-powered curl to make SSL-connections much more efficiently than using {{{opt(--cacert)}}} if the {{{opt(--cacert)}}}
file contains many CA certificates.

If this option is set, the default capath value will be ignored, and if it is used several times, the last one will be used.

- {{{option(--pinnedpubkey)}}} {{{argument(<pinned public key (hashes)>)}}}
(SSL) Tells curl to use the specified public key file (or hashes) to verify the peer. This can be a path to a file which contains a single public key in PEM or
DER format, or any number of base64 encoded sha256 hashes preceded by 'sha256//' and separated by ';'

When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key is extracted from this certificate and if it does
not exactly match the public key provided to this option, curl will abort the connection before sending or receiving any data.

Added in 7.39.0 for OpenSSL, GnuTLS and GSKit. Added in 7.43.0 for NSS and wolfSSL/CyaSSL. sha256 support added in 7.44.0 for OpenSSL, GnuTLS, NSS and wolf-
SSL/CyaSSL. Other SSL backends not supported.

If this option is used several times, the last one will be used.

- {{{option(--cert-status)}}}
(SSL) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.

If this option is enabled and the server sends an invalid (e.g. expired) response, if the response suggests that the server certificate has been revoked, or no
response at all is received, the verification fails.

This is currently only implemented in the OpenSSL, GnuTLS and NSS backends. (Added in 7.41.0)

- {{{option(--false-start)}}}

(SSL) Tells curl to use false start during the TLS handshake. False start is a mode where a TLS client will start sending application data before verifying the
server's Finished message, thus saving a round trip when performing a full handshake.

This is currently only implemented in the NSS and Secure Transport (on iOS 7.0 or later, or OS X 10.9 or later) backends. (Added in 7.42.0)

- {{{option(-f)}}}, {{{option(--fail)}}}
(HTTP) Fail silently (no output at all) on server errors. This is mostly done to better enable scripts etc to better deal with failed attempts. In normal cases
when an HTTP server fails to deliver a document, it returns an HTML document stating so (which often also describes why and more). This flag will prevent curl
from outputting that and return error 22.

This method is not fail-safe and there are occasions where non-successful response codes will slip through, especially when authentication is involved (response
codes 401 and 407).

- {{{option(-F)}}}, {{{option(--form)}}} <{{{argument(name)}}}={{{argument(content)}}}>
(HTTP) This lets curl emulate a filled-in form in which a user has pressed the submit button. This causes curl to POST data using the Content-Type multipart/form-
data according to RFC 2388. This enables uploading of binary files etc. To force the 'content' part to be a file, prefix the file name with an @ sign. To just get
the content part from a file, prefix the file name with the symbol <. The difference between @ and < is then that @ makes a file get attached in the post as a
file upload, while the < makes a text field and just get the contents for that text field from a file.

Example, to send your password file to the server, where 'password' is the name of the form-field to which /etc/passwd will be the input:

curl {{{option(-F)}}} password=@/etc/passwd www.mypasswords.com

To read content from stdin instead of a file, use - as the filename. This goes for both @ and < constructs. Unfortunately it does not support reading the file
from a named pipe or similar, as it needs the full size before the transfer starts.

You can also tell curl what Content-Type to use by using 'type=', in a manner similar to:

curl {{{opt(-F)}}} "web=@index.html;type=text/html" url.com

or

curl {{{opt(-F)}}} "name=daniel;type=text/foo" url.com

You can also explicitly change the name field of a file upload part by setting filename=, like this:

curl {{{opt(-F)}}} "file=@localfile;filename=nameinpost" url.com

If filename/path contains ',' or ';', it must be quoted by double-quotes like:

curl {{{opt(-F)}}} "file=@\\"localfile\\";filename=\\"nameinpost\\"" url.com

or

curl {{{opt(-F)}}} 'file=@"localfile";filename="nameinpost"' url.com

Note that if a filename/path is quoted by double-quotes, any double-quote or backslash within the filename must be escaped by backslash.

See further examples and details in the MANUAL.

This option can be used multiple times.

- {{{option(--ftp-account)}}} {{{argument([data])}}}
(FTP) When an FTP server asks for "account data" after user name and password has been provided, this data is sent off using the ACCT command. (Added in 7.13.0)

If this option is used several times, the last one will be used.

- {{{option(--ftp-alternative-to-user)}}} {{{argument(<command>)}}}
(FTP) If authenticating with the USER and PASS commands fails, send this command. When connecting to Tumbleweed's Secure Transport server over FTPS using a
client certificate, using "SITE AUTH" will tell the server to retrieve the username from the certificate. (Added in 7.15.5)

- {{{option(--ftp-create-dirs)}}}
(FTP/SFTP) When an FTP or SFTP URL/operation uses a path that doesn't currently exist on the server, the standard behavior of curl is to fail. Using this option,
curl will instead attempt to create missing directories.

- {{{option(--ftp-method)}}} {{{argument([method])}}}
(FTP) Control what method curl should use to reach a file on an FTP(S) server. The method argument should be one of the following alternatives:

multicwd
curl does a single CWD operation for each path part in the given URL. For deep hierarchies this means very many commands. This is how RFC 1738 says it
should be done. This is the default but the slowest behavior.

nocwd curl does no CWD at all. curl will do SIZE, RETR, STOR etc and give a full path to the server for all these commands. This is the fastest behavior.

singlecwd
curl does one CWD with the full target directory and then operates on the file "normally" (like in the multicwd case). This is somewhat more standards com-
pliant than 'nocwd' but without the full penalty of 'multicwd'.

(Added in 7.15.1)

- {{{option(--ftp-pasv)}}}
(FTP) Use passive mode for the data connection. Passive is the internal default behavior, but using this option can be used to override a previous -P/-ftp-port
option. (Added in 7.11.0)

If this option is used several times, only the first one is used. Undoing an enforced passive really isn't doable but you must then instead enforce the correct
{{{opt(-P)}}}, {{{opt(--ftp-port)}}} again.

Passive mode means that curl will try the EPSV command first and then PASV, unless {{{opt(--disable-epsv)}}} is used.

- {{{option(--ftp-skip-pasv-ip)}}}
(FTP) Tell curl to not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection. Instead curl will re-
use the same IP address it already uses for the control connection. (Added in 7.14.2)

This option has no effect if PORT, EPRT or EPSV is used instead of PASV.

- {{{option(--ftp-pret)}}}
(FTP) Tell curl to send a PRET command before PASV (and EPSV). Certain FTP servers, mainly drftpd, require this non-standard command for directory listings as
well as up and downloads in PASV mode. (Added in 7.20.x)

- {{{option(--ftp-ssl-ccc)}}}
(FTP) Use CCC (Clear Command Channel) Shuts down the SSL/TLS layer after authenticating. The rest of the control channel communication will be unencrypted. This
allows NAT routers to follow the FTP transaction. The default mode is passive. See {{{opt(--ftp-ssl-ccc-mode)}}} for other modes. (Added in 7.16.1)

- {{{option(--ftp-ssl-ccc-mode)}}} [{{{argument(active)}}}/{{{argument(passive)}}}]
(FTP) Use CCC (Clear Command Channel) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not
reply to the shutdown from the server. The active mode initiates the shutdown and waits for a reply from the server. (Added in 7.16.2)

- {{{option(--ftp-ssl-control)}}}
(FTP) Require SSL/TLS for the FTP login, clear for transfer. Allows secure authentication, but non-encrypted data transfers for efficiency. Fails the transfer
if the server doesn't support SSL/TLS. (Added in 7.16.0) that can still be used but will be removed in a future version.

- {{{option(--form-string)}}} <{{{argument(name)}}}={{{argument(string)}}}>
(HTTP) Similar to {{{opt(--form)}}} except that the value string for the named parameter is used literally. Leading '@' and '<' characters, and the ';type=' string in the
value have no special meaning. Use this in preference to {{{opt(--form)}}} if there's any possibility that the string value may accidentally trigger the '@' or '<' features
of {{{option(--form.)}}}

- {{{option(-g)}}}, {{{option(--globoff)}}}
This option switches off the "URL globbing parser". When you set this option, you can specify URLs that contain the letters {}[] without having them being inter-
preted by curl itself. Note that these letters are not normal legal URL contents but they should be encoded according to the URI standard.

This option controls transfers and thus will not affect slow connects etc. If this is a concern for you, try the {{{opt(--connect-timeout)}}} option.

If this option is used several times, the last one will be used.

- {{{option(-Y)}}}, {{{option(--speed-limit)}}} {{{argument(<speed>)}}}
If a download is slower than this given speed (in bytes per second) for speed-time seconds it gets aborted. speed-time is set with {{{opt(-y)}}} and is 30 if not set.

If this option is used several times, the last one will be used.

- {{{option(-z)}}}, {{{option(--time-cond)}}} {{{argument(<date expression>)}}}|{{{argument(<file>)}}}
(HTTP/FTP) Request a file that has been modified later than the given time and date, or one that has been modified before that time. The <date expression> can be
all sorts of date strings or if it doesn't match any internal ones, it is taken as a filename and tries to get the modification date (mtime) from <file> instead.
See the curl_getdate(3) man pages for date expression details.

Start the date expression with a dash (-) to make it request for a document that is older than the given date/time, default is a document that is newer than the
specified date/time.

If this option is used several times, the last one will be used.

- {{{option(-h)}}}, {{{option(--help)}}}
Usage help. This lists all current command line options with a short description.

- {{{option(-M)}}}, {{{option(--manual)}}}
Manual. Display the huge help text.

- {{{option(-V)}}}, {{{option(--version)}}}


# ** Examples
#    :PROPERTIES: 
#    :CUSTOM_ID: examples
#    :LANG_EN:  Examples
#    :LANG_ES:  Ejemplos
#    :LANG_KO:  사용 예
#    :LANG_ZH:  例子
#    :LANG_JA:  例
#    :END:      

# * See also
#   :PROPERTIES: 
#   :CUSTOM_ID: seealso
#   :LANG_EN:  See also
#   :LANG_ES:  Ver también
#   :LANG_KO:  관련 항목
#   :LANG_ZH:  相关主题
#   :LANG_JA:  関連項目
#   :END:      

* Referencias
  :PROPERTIES: 
  :CUSTOM_ID: references
  :LANG: es
  :END:      

- {{{official(https://curl.haxx.se/)}}}
- {{{source-code(https://github.com/curl/curl)}}}
